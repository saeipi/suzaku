syntax ="proto3";
import  "pb_com/common.proto";
import public "google/protobuf/timestamp.proto";
package pb_friend;
option go_package = "./friend;pb_friend";

//message CommonResp {
//  int32 code = 1;
//  string msg = 2;
//}


enum HANDLE_FRIEND_REQUEST_RESULT
{
  FRIEND_REQUEST_RESULT_NONE = 0;
  APPROVE = 1; // 同意
  RESOLUTELY = 2; // 拒绝
}

message AddFriendReq {
  string from_user_id = 1; // 邀请者ID
  string to_szk_id = 2; // 添加好友账户ID
  string to_user_id = 3; // 添加好友ID
  string operation_id = 4; // 操作者ID
  string req_msg = 5; // 请求信息
}

message AddFriendResp {
  pb_com.CommonResp common = 1;
}

enum FRIEND_REQUEST_ROLE
{
  NONE = 0;
  SPONSOR = 1; // 自己是发起者
  INVITED = 2; // 自己是受邀人
}

message GetFriendRequestListReq {
  string user_id = 1;
  FRIEND_REQUEST_ROLE role = 2; // 角色
  int32 page = 3;
  int32 page_size = 4;
}

message GetFriendRequestListResp {
  pb_com.CommonResp common = 1;
  int64 total_rows = 2;
  repeated FriendRequestItem list = 3;
}

message FriendRequestItem {
  string from_user_id = 1; // 发起人ID
  string to_user_id = 2; // 目标人ID
  string req_msg = 3; // 添加好友消息
  int32 handle_result = 4; // 结果
  string handle_msg = 5; // 处理消息
  int64 req_ts = 6; // 发起时间
  int64 handled_ts = 7; // 处理时间
  string handle_user_id = 8; // 处理人ID
//  google.protobuf.Timestamp req_ts = 7; // 发起时间
//  google.protobuf.Timestamp handle_at = 8; // 处理时间
}

// 处理添加好友申请
message HandleFriendRequestReq {
  string user_id = 1;
  string from_user_id = 2;
  string handle_user_id = 3;
  string handle_msg = 4;
  int32 handle_result = 5;
}

message HandleFriendRequestResp {
  pb_com.CommonResp common = 1;
}

// 获取好友列表
message FriendListReq {
  string user_id = 1;
  int32 page = 3;
  int32 page_size = 4;
}

message MemberInfo {
  string user_id = 1; // 用户ID
  string szk_id = 2; // 账户ID
  string nickname = 3; // 昵称
  string gender = 4; // 性别
  string avatar_url = 5; // 头像
  string session_id = 6; // 会话ID
}

message FriendListResp {
  pb_com.CommonResp common = 1;
  int64 total_rows = 2;
  repeated MemberInfo member_list = 3;
}

service Friend {
  rpc AddFriend(AddFriendReq) returns(AddFriendResp);
  rpc GetFriendRequestList(GetFriendRequestListReq) returns(GetFriendRequestListResp);
  rpc HandleFriendRequest(HandleFriendRequestReq) returns(HandleFriendRequestResp);
  rpc GetFriendList(FriendListReq) returns(FriendListResp);
}
