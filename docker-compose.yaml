version: "3"
#  docker-compose -h                      # 查看帮助
#  docker-compose up                      # 启动所有docker-compose服务
#  docker-compose up -d                   # 启动所有docker-compose服务并后台运行
#  docker-compose down                    # 停止并删除容器、网络、卷、镜像。
#  docker-compose exec  yml里面的服务id     # 进入容器实例内部  docker-compose exec docker-compose.yml文件中写的服务id /bin/bash
#  docker-compose ps                      # 展示当前docker-compose编排过的运行的所有容器
#  docker-compose top                     # 展示当前docker-compose编排过的容器进程
#  docker-compose logs  yml里面的服务id     # 查看容器输出日志
#  docker-compose config     # 检查配置
#  docker-compose config -q  # 检查配置，有问题才有输出
#  docker-compose restart    # 重启服务
#  docker-compose start      # 启动服务
#  docker-compose stop       # 停止服务
#  docker exec -it f848ddd6aee0 /bin/bash
#  docker inspect f848ddd6aee0|tail -n 20
#  docker network inspect 1b7d65c22c41
#  apt-get update
#  apt -y install iputils-ping
#  docker rmi -f 8b2b1febb358

services:
  mysql:
    image: mysql:8.0.29
    container_name: mysql
    restart: always
    ports:
      - 3306:3306
    networks:
      - szk-network
#    network_mode: "host"
    volumes:
      - ./components/mysql/mysql-master/data:/var/lib/mysql
      - ./components/mysql/mysql-master/conf:/etc/mysql
      - ./components/mysql/mysql-master/mysql-files:/var/lib/mysql-files
      - ./components/mysql/mysql-master/log:/var/log/mysql
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: suzaku2022
      MYSQL_USER: suzaku
      MYSQL_PASSWORD: suzaku2022
    command: [
        '--character-set-server=utf8mb4',
        '--collation-server=utf8mb4_unicode_ci',
        '--default-time-zone=+8:00'
    ]

  mongo:
    image: mongo:5.0.9
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    networks:
      - szk-network
#    network_mode: "host"
    volumes:
      - ./components/mongodb/data/db:/data/db
      - ./components/mongodb/data/conf:/etc/mongo
      - ./components/mongodb/data/logs:/data/logs
    environment:
      TZ: Asia/Shanghai
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: suzaku2022
    command: --wiredTigerCacheSizeGB 2

  redis:
    image: redis:6.2.7
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - szk-network
#    network_mode: "host"
    volumes:
      - ./components/redis/data:/data
      - ./components/redis/conf:/usr/local/etc/redis
      # redis config file
      - ./components/redis/config/redis.conf:/usr/local/redis/config/redis.conf
    environment:
      TZ: Asia/Shanghai
    sysctls:
      net.core.somaxconn: 1024
    command: redis-server --requirepass suzaku2022 --appendonly yes

  minio:
    image: "bitnami/minio:latest"
    container_name: minio
    restart: always
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - szk-network
#    network_mode: "host"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: suzaku2022

  zookeeper:
    image: 'wurstmeister/zookeeper:latest'
    container_name: zookeeper
    restart: always
    ports:
      - 2181:2181
    networks:
      - szk-network
#    network_mode: "host"
    environment:
      TZ: Asia/Shanghai

  kafka:
    image: 'wurstmeister/kafka:latest'
    container_name: kafka
    restart: always
    ports:
      - 9092:9092
      - 9093:9093
    networks:
      - szk-network
#    network_mode: "host"

    environment:
      TZ: Asia/Shanghai
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "ws2ms_chat:2:1,ms2ps_chat:2:1"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://kafka:9093
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      - zookeeper

  etcd:
    image: bitnami/etcd:3.5
    container_name: etcd
    restart: always
    ports:
      - 2379:2379
      - 2380:2380
    networks:
      - szk-network
#    network_mode: "host"
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
#    command: /usr/local/bin/etcd --name etcd0 --data-dir /etcd-data --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://0.0.0.0:2379 --listen-peer-urls http://0.0.0.0:2380 --initial-advertise-peer-urls http://0.0.0.0:2380 --initial-cluster etcd0=http://0.0.0.0:2380 --initial-cluster-token tkn --initial-cluster-state new

  suzuku:
    image: suzuku:1.0.1
    container_name: suzuku
    restart: always
    ports:
      - 10000:10000
      - 17778:17778
    networks:
      - szk-network
#    network_mode: "host"
    volumes:
      - ./components/suzaku/configs:/suzuku/configs
      - ./components/suzaku/scripts:/suzuku/scripts
      - ./components/suzaku/build:/suzuku/build
      - ./components/suzaku/logs:/suzuku/logs
    depends_on:
      - mysql
      - mongo
      - redis
      - minio
      - kafka
      - etcd

networks:
  szk-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.254.0/24
          ip_range: 192.168.254.0/24